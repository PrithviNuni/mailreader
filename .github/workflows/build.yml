name: Build and Deploy to ECS

on:
  workflow_dispatch:
  push:
    branches:
      - mailreader
      - test1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: "11"
          distribution: "temurin"
          cache: maven

      - name: Build with Maven
        run: |
          mvn -B package --file pom.xml
          ls -altrh target/*
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Set IMAGE_URI for use later in the same job
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
      - name: Print IMAGE_URI
        run: echo "IMAGE_URI=${{ env.IMAGE_URI }}"

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Update task-definition.json with the image URI
        run: |
          jq --arg image_uri "${{ env.IMAGE_URI }}" \
             '.containerDefinitions[0].image = $image_uri' \
             task-definition.json > updated-task-definition.json
          mv updated-task-definition.json task-definition.json
      - name: Register ECS Task Definition
        id: register-task-def
        run: |
          RESPONSE=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --region ${{ secrets.AWS_REGION }})
          echo "Register Response: $RESPONSE"
          
          # Extract the task definition ARN
          TASK_DEFINITION_ARN=$(echo $RESPONSE | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV
      - name: Create or Update ECS Service
        run: |
          # Check if the service exists
          SERVICE_EXISTS=$(aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --query 'services[0].serviceName' \
            --output text || true)
          echo "Service Exists: $SERVICE_EXISTS"
          if [ "$SERVICE_EXISTS" == "${{ secrets.ECS_SERVICE_NAME }}" ]; then
            echo "Service exists, updating..."
            aws ecs update-service \
              --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
              --service ${{ secrets.ECS_SERVICE_NAME }} \
              --task-definition ${{ env.TASK_DEFINITION_ARN }} \
              --force-new-deployment \
              --region ${{ secrets.AWS_REGION }} \
              --output json
          else
            echo "Service does not exist, creating..."
            
            # Ensure TASK_DEFINITION_ARN is correctly set
            echo "Using Task Definition ARN: ${{ env.TASK_DEFINITION_ARN }}"
            aws ecs create-service \
              --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
              --service-name ${{ secrets.ECS_SERVICE_NAME }} \
              --task-definition ${{ env.TASK_DEFINITION_ARN }} \
              --desired-count 1 \
              --region ${{ secrets.AWS_REGION }} \
              --output json
          fi
